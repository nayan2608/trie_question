class Node{
   Node* link[2];
    public:
    bool containkey(int bit){
        return link[bit]!=NULL;
    }
    void put(int bit,Node* node){
        link[bit]=node;
    }
    Node* get(int bit){
        return link[bit];
    }
};
class trie{
   Node* root;
    public:
    trie(){
        root=new Node();
    }
    void insert(int num){
        Node* node=root;
        for(int i=31;i>=0;i--){
            int bit=(num>>i)&1;
            if(!node->containkey(bit)){
                node->put(bit,new Node());
            }
            node=node->get(bit);
        }
    }
    int getmax(int num){
        Node* node=root;
        int maxnum=0;
        for(int i=31;i>=0;i--){
            int bit=(num>>i)&1;
            if(node->containkey(1-bit)){
                maxnum=maxnum|(1<<i);
                node=node->get(1-bit);
            }
            else{
                node=node->get(bit);
            }
        }
        return maxnum;
    }
};
int maxXOR(int n, int m, vector<int> &arr1, vector<int> &arr2) 
{
    // Write your code here.  
    trie t;
    for(auto &it:arr1){
        t.insert(it);
    }
    
    int maxi=0;
    for(auto &it:arr2){
        maxi=max(maxi,t.getmax(it));
    }
    return maxi;
}
